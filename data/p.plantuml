@startuml  Screwdriver-payload ETL

'─────────────────────────────────────────────────────────────
'  Screwdriver-payload ETL  –  Detailed Processing Diagram
'─────────────────────────────────────────────────────────────
skinparam monochrome true
skinparam componentStyle rectangle
skinparam packageBorderColor Black
skinparam packageBackgroundColor White
skinparam componentBorderColor Black
skinparam databaseBorderColor Black
skinparam arrowFontSize 10
'─────────────────────────────────────────────────────────────
title  Screwdriver Payload  ➜  SQL Server  (Fully-Automated Flow)
actor "JSON Payload File" as PF

'──────────────────────  Node-RED Flow  ──────────────────────
package "Node-RED flow (single file instance)" {

  component "File Watcher\n(watches folder)"          as NW
  component "JSON Parser\n(msg.payload ← JS object)"  as JP
  component "Function Node\nBuild Params + TVPs"      as FN
  component "MSSQL Exec\n→ UpsertAllLookups"          as MSSQL1
  component "MSSQL Exec\n→ InsertVerschraubungPackage" as MSSQL2
  component "Catch / Error Handler\n(log ⚠, move file)" as EH

  PF  --> NW   : new file
  NW  --> JP   : raw text
  JP  --> FN   : parsed object
  FN  --> MSSQL1 : EXEC UpsertAllLookups\n<<Tx-1>>
  MSSQL1 --> FN : OUTPUT ids
  FN  --> MSSQL2 : EXEC InsertVerschraubungPackage\n<<Tx-2>>
  
  MSSQL1 -[#red,dashed]-> EH : SQL error
  MSSQL2 -[#red,dashed]-> EH : SQL error
}

'──────────────────────  SQL Server Side  ──────────────────────
package "SQL Server (same DB)" {

  '──────── Stored Procedures (orchestration) ────────
  package "Stored Procedures" {
    component "UpsertAllLookups\n<<Tx-1>>"            as SP1
    component "InsertVerschraubungPackage\n<<Tx-2>>"  as SP2
    component "UpsertMaterialnummer"                  as U_Mat
    component "UpsertSchrauber"                       as U_Scr
    component "UpsertProgramm"                        as U_Prg
    component "GetOrCreate_ProgVersion"               as U_PVer
    component "UpsertAttributWert"                    as U_Attr
    component "UpsertMessung"                         as U_Msg
    component "UpsertReferenzwertTyp"                 as U_Ref
  }

  '──────── Table-Valued Types (TVP definitions) ─────
  package "User Types" {
    component "TVP_Istwerte\n(id_Messung, wert)"      as TVP1
    component "TVP_Graph\n(id_Messung, werte)"        as TVP2
  }

  '──────── Data Tables (logical groups) ─────────────
  database "Lookup Tables\nMaterialnummer | Schrauber | Programm" as DB_Look
  database "Versioning\nProgramm_Version | Programm_Version_Sollwerte" as DB_Ver
  database "Event Tables\nVerschraubung | Programm_Version_Istwerte | Graph_Werte" as DB_Evt
  database "Attribute Tables\nEditierbar_Attribut | Attribut_Wert" as DB_Attr

  '────────  Call graph inside Tx-1  ─────────
  SP1 --> U_Mat
  SP1 --> U_Scr
  SP1 --> U_Prg
  SP1 --> U_PVer
  SP1 --> U_Attr : 3× (ip0 / mac0 / hardware)
  ' optional helpers if you create types on-the-fly
  SP1 --> U_Msg
  SP1 --> U_Ref

  U_Mat --> DB_Look
  U_Scr --> DB_Look
  U_Prg --> DB_Look
  U_PVer --> DB_Ver
  U_Attr --> DB_Attr
  U_Msg  --> DB_Look
  U_Ref  --> DB_Look

  '────────  Tx-2 writes event data  ────────
  SP2 --> DB_Evt : INSERT Verschraubung
  SP2 --> DB_Evt : INSERT Istwerte
  SP2 --> DB_Evt : INSERT Graph_Werte\n(only when NOK)

  note right of SP2
    IF @ergebnis = 'N'\n    INSERT INTO Graph_Werte\n  ELSE skip
  end note
}

'────────── Cross-boundary arrows ──────────
FN ..> TVP1 : pass TVP params
FN ..> TVP2
SP1 ..> SP2 : surrogate IDs

@enduml
